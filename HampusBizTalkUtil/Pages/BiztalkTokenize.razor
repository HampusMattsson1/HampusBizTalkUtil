@page "/biztalktokenize"

@using HampusBizTalkUtil.Data
@using HampusBizTalkUtil.Models
@using System.Text.RegularExpressions
@using System.Xml
@using System.ComponentModel

@inject Tokenization Tokenization
@inject IJSRuntime JSRuntime

<h3>Biztalk Tokenization</h3>

<div class="grid-container">

	<div class="grid-item">
		@* <h5>Applications</h5>
		<button style="background-color: lightblue" @onclick="GetBiztalkApplications">Refresh applications</button>
		<br />
		<select multiple size="20" @onchange="SetApplications">
			@foreach (var option in biztalkApplications)
			{
				<option value="@option">@option</option>
			}
		</select> *@
		<h5 style="font-weight: bold">Binding XML</h5>
		@* <textarea @oninput="Update" @bind="xml" rows="50" cols="50" id="rawxml" style="border:2px solid Black;"></textarea> *@
		@* <pre @oninput="Update"  style="border:2px solid Black;" contenteditable="true">&nbsp;@xml&nbsp;</pre> *@
		@* <pre style="min-height: 5em" id="rawxml" contenteditable="true" @oninput="Update"><code id="highlighting" class="xml"></code>@xml</pre> *@
		<pre><code id="editor" @oninput="Update" class="xml" contenteditable="true" style="max-width: 50em;"></code></pre>
	</div>

	<div class="grid-item">
		<h5 style="font-weight: bold">Port values</h5>
		<div id="values">
			@* @xml *@
			@foreach(var port in binding)
			{
				<p>@port.Key</p>
				foreach(var value in port.Value)
				{
					<button @onclick="() => CopyText(value.RawValue)" style="width: 10%; float: left">Copy</button>
					<input value="@value.Name" style='width:45%; float: left' />
					@* <input value="@value.Value" oninput="@((ChangeEventArgs e) => value.UpdateXml(document))" style='width:50%' /> *@
					<input @bind="value.Value" oninput="@((ChangeEventArgs e) => UpdateXmlString(e, value))" style='width:45%' />
				}
				
				<br />
				<br />
			}
		</div>
		@* <h5>Bindings</h5>
		<button @onclick="GetExportedBindings" disabled="@DisableGetBindings">Get bindings för selected application(1)</button>

		@foreach (var binding in bindingsForApplication)
		{
			<p>@binding</p>
		} *@

		@* <button style="background-color: lightblue" @onclick="GetBiztalkApplicationsByDependency">Get applications by dependency</button>
		<br />
		<select multiple size="20" @onchange="SetApplications">
			@foreach (var option in biztalkApplications)
			{
				<option value="@option">@option</option>
			}
		</select> *@
	</div>

	<div class="grid-item">
		<h5 style="font-weight: bold">Variables</h5>
		<div id="variables">
			@foreach (var variable in variables)
			{
				<input value="@variable" />
				<br />
			}
		</div>
		@* <p>Selected Applications @selectedApplications.Length</p>
		<br />
		<br />
		<button style="background-color: lightgreen" @onclick="StartApplication">Start Selected</button>
		<br />
		<br />
		<button style="background-color: palevioletred" @onclick="StopApplication">Stop Selected</button> *@
	</div>

</div>

<script>
	function updateHighlighting() {
        const editor = document.getElementById('editor');
        hljs.highlightElement(editor);
    }

    // Initialize highlighting
    document.addEventListener('DOMContentLoaded', (event) => {
        updateHighlighting();
    });

	// Get pre-value
	function getRawXml()
	{
		return document.getElementById('editor').innerText;
	}

	function copyToClipboard(text) {
		navigator.clipboard.writeText(text).then(function () {
			console.log('Text copied to clipboard');
		}).catch(function (error) {
			console.error('Error copying text: ', error);
		});
	}
</script>

<script src="highlight.min.js"></script>

<style>
	.grid-container {
		display: grid;
		column-gap: 10px;
		grid-template-columns: auto auto auto;
		background-color: #2196F3;
		padding: 10px;
	}

	.grid-container-env {
		display: grid;
		column-gap: 5px;
		grid-template-columns: auto auto auto auto;
		background-color: #2196F3;
		padding: 5px;
	}

	.grid-item {
		background-color: rgba(255, 255, 255, 0.8);
		border: 1px solid rgba(0, 0, 0, 0.8);
		padding: 20px;
	}

	select {
		overflow-y: auto;
	}

	.done {
		background-color: lightblue;
	}

	pre {
        width: 100%;
        height: 200px;
        overflow: auto;
        background: #f5f5f5;
        padding: 10px;
    }
</style>

@code {

	private XmlDocument document = new XmlDocument();
	private string xml = "";
	private Dictionary<string, List<BindingValue>> binding = new Dictionary<string, List<BindingValue>>();
	private List<string> variables = new List<string>();

	// Onload
	protected override Task OnInitializedAsync()
	{
		// OutputTest();
		// binding = Tokenization.GetBasicBindingValues(xml);
		JSRuntime.InvokeVoidAsync("updateHighlighting");
		return base.OnInitializedAsync();
	}

	private async Task Update(ChangeEventArgs e)
	{
		string newXml = await JSRuntime.InvokeAsync<string>("getRawXml");

		try
		{
			document.LoadXml(newXml);
		} catch {}

		binding = Tokenization.GetBasicBindingValues(document, xml);
		xml = document.OuterXml;
		FindVariables();
	}

	private void UpdateXmlString(ChangeEventArgs e, BindingValue bindingValue)
	{
		bindingValue.Value = e.Value.ToString();
		bindingValue.UpdateXml(document);

		xml = document.OuterXml;
		FindVariables();

		StateHasChanged();
	}

	private void FindVariables()
	{
		var variableMatches = Regex.Matches(xml, "__.*?__");
		if (variableMatches.Count > 0)
		{
			variables = variableMatches.Cast<Match>().Select(m => m.Value.Substring(2, m.Value.Length-4)).ToList();
		}
		else
		{
			variables.Clear();
		}

		JSRuntime.InvokeVoidAsync("updateHighlighting");
	}

	private async Task CopyText(string text)
	{
		await JSRuntime.InvokeVoidAsync("copyToClipboard", text);
	}
}
